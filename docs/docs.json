{
	"id": 0,
	"name": "kilo-emitter",
	"kind": 0,
	"flags": {},
	"children": [
		{
			"id": 1,
			"name": "\"Emitter\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "F:/Dev/web_playgrounds/dssm/src/Emitter.ts",
			"children": [
				{
					"id": 27,
					"name": "Emitter",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Event Emitter class that takes care of managing subscribed listeners and dispatching events to them.",
						"tags": [
							{
								"tag": "example_node",
								"text": "\n```javascript\nconst Emitter = require('kilo-emitter')\nlet cb = (World) => { console.log(`Hello ${World}!`) }\n\nlet myEmitter = new Emitter()\nmyEmitter.on('evt', cb)\nmyEmitter.emit('evt', ['World']) // `Hello World!`\nconsole.log(myEmitter.triggers('evt', cb)) // true\nmyEmitter.off('evt')\nconsole.log(myEmitter.triggers('evt', cb)) // false\n```"
							},
							{
								"tag": "example_es6",
								"text": "\n```typescript\nimport Emitter from 'kilo-emitter'\n\nlet myEmitter = new Emitter()\nmyEmitter.once('evt', console.log)\nmyEmitter.once('evt2', console.log)\nmyEmitter.emit('evt', ['hey there']) // 'hey there'\nconsole.log(myEmitter.triggers('evt', console.log)) // false\nconsole.log(myEmitter.triggers()) // true\nmyEmitter.off()\nconsole.log(myEmitter.triggers()) // false\n```"
							},
							{
								"tag": "example_browser",
								"text": "\n```html\n <script src=\"Emitter.js\"></script>\n\n<script src=\"Emitter.js\">\nvar myEmitter = new Emitter()\nmyEmitter.once('evt', (param) => {\n    \tconsole.log(`Hey ${param}!`)\n    }, ['there'])\nmyEmitter.emit('evt')\n</script>\n```\n\n"
							}
						]
					},
					"children": [
						{
							"id": 36,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Instantiates Emitter class, creates empty $evt field."
							},
							"signatures": [
								{
									"id": 37,
									"name": "new Emitter",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {
										"shortText": "Instantiates Emitter class, creates empty $evt field."
									},
									"type": {
										"type": "reference",
										"name": "Emitter",
										"id": 27
									}
								}
							],
							"sources": [
								{
									"fileName": "Emitter.ts",
									"line": 89,
									"character": 45
								}
							]
						},
						{
							"id": 32,
							"name": "$evt",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"comment": {
								"shortText": "Internal field that is used to store info about events and listeners"
							},
							"sources": [
								{
									"fileName": "Emitter.ts",
									"line": 89,
									"character": 14
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 33,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"indexSignature": {
										"id": 34,
										"name": "__index",
										"kind": 8192,
										"kindString": "Index signature",
										"flags": {},
										"parameters": [
											{
												"id": 35,
												"name": "key",
												"kind": 32768,
												"kindString": "Parameter",
												"flags": {},
												"type": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										],
										"type": {
											"type": "array",
											"elementType": {
												"type": "reference",
												"name": "Listener",
												"id": 2
											}
										}
									},
									"sources": [
										{
											"fileName": "Emitter.ts",
											"line": 89,
											"character": 15
										}
									]
								}
							}
						},
						{
							"id": 54,
							"name": "emit",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 55,
									"name": "emit",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Emits an event invoking all the listeners subscribed to it and passing rest of the arguments to them. Listeners array is cloned to prevent errors due to array mutation while event is still being emitted. If listener returns a string 'stopEmit' then the process will be aborted and rest of the listeners in queue will not be invoked, if some of then were added as .once() then it means that they will not be removed and will remain in queue until invoked or removed explicitly.",
										"returns": "Emitter instance for chaining\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```typescript\n\nlet em = new Emitter()\n\n// this listeners stops propagation and removes itself\nem.once('evt', (arg1, arg2) => {\n  console.log(arg1) // 'a'\n  console.log(arg2) // 'b'\n  return 'stopEmit'\n})\n\n// this listener is triggered on second emit\nem.on('evt', () => {\n  // never triggered\n})\n\nem.emit('evt', ['a', 'b'])\nem.emit('evt')\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 56,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Event name whose listeners should be invoked."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 57,
											"name": "args",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Array of arguments that should be passed to each listener callback."
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "this"
									}
								}
							],
							"sources": [
								{
									"fileName": "Emitter.ts",
									"line": 252,
									"character": 13
								}
							]
						},
						{
							"id": 50,
							"name": "off",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 51,
									"name": "off",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "If both arguments are passed it removes the listener if such exists. If only event name is passed it will remove all the listeners for that event. If no arguments passed it will purge all the listeners for current emitter. Distinction is made by the length of the `arguments` variable to avoid undesired behaviour when `null` or `undefined` are passed due to an error. This means that `off('init')` will try to remove all listeners for _'init'_ event and `off(null)` will try to remove all events for  _'null'_ event.",
										"returns": "Emitter instance for chaining\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```typescript\n\nlet em = new Emitter()\nlet cb = () => {}\n\nem.on('evt', cb) // removed on 1sk off\nem.on('evt', () => {}) // removed on 2sk off\nem.on('evt2', () => {}) // removed on 3sk off\n\n// removes specific listener\nem.off('evt', cb)\n\n// removes all listeners for event\nem.off('evt')\n\n// removes all listeners completely\nem.off()\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 52,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Event name you want to unsubscribe from."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 53,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Listener callback you want to remove."
											},
											"type": {
												"type": "reference",
												"name": "Function"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "this"
									}
								}
							],
							"sources": [
								{
									"fileName": "Emitter.ts",
									"line": 207,
									"character": 12
								}
							]
						},
						{
							"id": 38,
							"name": "on",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 39,
									"name": "on",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Subscribes a listener to an event. Listener will persist until removed with .off(). Subscribing an existing listener again will move it to the end (or start, if priority specified) of the queue. Unique listener is considered a combo of an event name and a reference to a function. If a same callback added with a different context it will be considered as a same listener. Context parameter is skipable, if you pass boolean as 3rd argument it will be used as priority.",
										"returns": "Emitter instance for chaining\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```typescript\n\nlet em = new Emitter()\n\n// regulat listener\nem.on('evt', (val) => {})\n\n// listener with context\nem.on('evt', (val) => {}, {someField: 'someValue'})\n\n// listener with priority (added to the start of queue)\nem.on('evt', (val) => {}, null, true)\n// same\nem.on('evt', (val) => {}, true)\n\nem.emit('evt', ['otherValue'])\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 40,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Event name you want to subscribe to."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 41,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Listener callback to be invoked."
											},
											"type": {
												"type": "reference",
												"name": "Listener",
												"id": 2
											}
										},
										{
											"id": 42,
											"name": "context",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Context to invoke callback with (pass as this) OR a boolean value for priority if you want to skip context"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "any"
													},
													{
														"type": "intrinsic",
														"name": "boolean"
													}
												]
											}
										},
										{
											"id": 43,
											"name": "priority",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "If true will add listener to the start of the queue."
											},
											"type": {
												"type": "reference",
												"name": "Boolean"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "this"
									}
								}
							],
							"sources": [
								{
									"fileName": "Emitter.ts",
									"line": 125,
									"character": 11
								}
							]
						},
						{
							"id": 44,
							"name": "once",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 45,
									"name": "once",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Same as `.on()` but listener will be automatically removed after first invocation.",
										"returns": "Emitter instance for chaining\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```typescript\n\nlet em = new Emitter()\nlet cb = () => {}\n\nem.once('evt', cb)\n\nconsole.log( em.triggers('evt', cb) ) // true\n\nem.emit('evt')\n\nconsole.log( em.triggers('evt', cb) ) // false\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 46,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Event name you want to subscribe to."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 47,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Listener callback to be invoked."
											},
											"type": {
												"type": "reference",
												"name": "Listener",
												"id": 2
											}
										},
										{
											"id": 48,
											"name": "context",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Context to invoke callback with (pass as this)."
											},
											"type": {
												"type": "intrinsic",
												"name": "object"
											}
										},
										{
											"id": 49,
											"name": "priority",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "If true will add listener to the start of the queue."
											},
											"type": {
												"type": "reference",
												"name": "Boolean"
											}
										}
									],
									"type": {
										"type": "unknown",
										"name": "this"
									}
								}
							],
							"sources": [
								{
									"fileName": "Emitter.ts",
									"line": 173,
									"character": 13
								}
							]
						},
						{
							"id": 58,
							"name": "triggers",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 59,
									"name": "triggers",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "If both arguments are passed then it will check whether specific listener is subscribed for specific event. If only event name is passed it will check if there are any listeners subscribed for that event. If no arguments passed it will check if emitter has any listeners at all. Distinction is made by the length of the `arguments` variable to avoid undesired behaviour when `null` or `undefined` are passed due to an error. This means that `triggers('init')` will check if there are any listeners fot the event _'init'_ and `triggers(null)` will check if there are any listeners fot the event  _'null'_.",
										"returns": "Boolean value determining whether check succeeded or not.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```typescript\n\nlet em = new Emitter()\nlet cb = () => {}\n\nem.on('evt', cb)\nem.on('evt', () => {})\nem.on('evt3', () => {})\n\nconsole.log( em.triggers('evt', cb) ) // true\nem.off('evt', cb)\nconsole.log( em.triggers('evt', cb) ) // false\n\nconsole.log( em.triggers('evt') ) // true\nem.off('evt')\nconsole.log( em.triggers('evt') ) // false\n\nconsole.log( em.triggers() ) // true\nem.off()\nconsole.log( em.triggers() ) // false\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 60,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Event name."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 61,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Listener function."
											},
											"type": {
												"type": "reference",
												"name": "Function"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"sources": [
								{
									"fileName": "Emitter.ts",
									"line": 301,
									"character": 17
								}
							]
						},
						{
							"id": 28,
							"name": "extend",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 29,
									"name": "extend",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Extends target object that is passed to it with Emitter class methods. It creates new Emitter class and assigns all of it's fields and methods (including $evt) to target object. Note that those methods will override existing fields with same names and also should now be invoked on target since they rely on `this` keyword.",
										"returns": "Extended target object\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```typescript\n\nlet someObject = {someField: 'someValue'}\nEmitter.extend(someObject)\n\nsomeObject.on('evt', function (someParam) {\n  console.log(someParam) // 'otherValue'\n  console.log(this.someField) // 'someValue'\n})\nsomeObject.emit('evt', ['otherValue'])\n```\n"
											}
										]
									},
									"typeParameter": [
										{
											"id": 30,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"parameters": [
										{
											"id": 31,
											"name": "target",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "An object that will be extended."
											},
											"type": {
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										}
									],
									"type": {
										"type": "intersection",
										"types": [
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "intrinsic",
													"name": "any"
												}
											},
											{
												"type": "reference",
												"name": "Emitter",
												"id": 27
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "Emitter.ts",
									"line": 76,
									"character": 15
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								36
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								32
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								54,
								50,
								38,
								44,
								58,
								28
							]
						}
					],
					"sources": [
						{
							"fileName": "Emitter.ts",
							"line": 56,
							"character": 28
						}
					]
				},
				{
					"id": 2,
					"name": "Listener",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Interface of listener callback that is subscribed to an event."
					},
					"children": [
						{
							"id": 3,
							"name": "$ctx",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Holds a reference to the context object that is passed in `.on()` or `.once()` methods."
							},
							"sources": [
								{
									"fileName": "Emitter.ts",
									"line": 8,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "object"
							}
						},
						{
							"id": 4,
							"name": "$once",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Boolean flag to indicate that listener should be removed after invocation."
							},
							"sources": [
								{
									"fileName": "Emitter.ts",
									"line": 12,
									"character": 7
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 26,
							"name": "Function",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "F:/Dev/web_playgrounds/dssm/node_modules/typescript/lib/lib.d.ts",
									"line": 306,
									"character": 22
								}
							],
							"type": {
								"type": "reference",
								"name": "FunctionConstructor"
							}
						},
						{
							"id": 24,
							"name": "arguments",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "F:/Dev/web_playgrounds/dssm/node_modules/typescript/lib/lib.d.ts",
									"line": 292,
									"character": 13
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Function.arguments"
							}
						},
						{
							"id": 25,
							"name": "caller",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "F:/Dev/web_playgrounds/dssm/node_modules/typescript/lib/lib.d.ts",
									"line": 293,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"name": "Function"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Function.caller"
							}
						},
						{
							"id": 23,
							"name": "length",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "F:/Dev/web_playgrounds/dssm/node_modules/typescript/lib/lib.d.ts",
									"line": 289,
									"character": 19
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Function.length"
							}
						},
						{
							"id": 22,
							"name": "prototype",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "F:/Dev/web_playgrounds/dssm/node_modules/typescript/lib/lib.d.ts",
									"line": 288,
									"character": 13
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Function.prototype"
							}
						},
						{
							"id": 5,
							"name": "apply",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 6,
									"name": "apply",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Calls the function, substituting the specified object for the this value of the function, and the specified array for the arguments of the function."
									},
									"parameters": [
										{
											"id": 7,
											"name": "this",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Function"
											}
										},
										{
											"id": 8,
											"name": "thisArg",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The object to be used as the this object."
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 9,
											"name": "argArray",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "A set of arguments to be passed to the function.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Function.apply"
									}
								}
							],
							"sources": [
								{
									"fileName": "F:/Dev/web_playgrounds/dssm/node_modules/typescript/lib/lib.d.ts",
									"line": 268,
									"character": 9
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Function.apply"
							}
						},
						{
							"id": 15,
							"name": "bind",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 16,
									"name": "bind",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "For a given function, creates a bound function that has the same body as the original function.\nThe this object of the bound function is associated with the specified object, and has the specified initial parameters."
									},
									"parameters": [
										{
											"id": 17,
											"name": "this",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Function"
											}
										},
										{
											"id": 18,
											"name": "thisArg",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "An object to which the this keyword can refer inside the new function."
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 19,
											"name": "argArray",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isRest": true
											},
											"comment": {
												"text": "A list of arguments to be passed to the new function.\n"
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Function.bind"
									}
								}
							],
							"sources": [
								{
									"fileName": "F:/Dev/web_playgrounds/dssm/node_modules/typescript/lib/lib.d.ts",
									"line": 283,
									"character": 8
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Function.bind"
							}
						},
						{
							"id": 10,
							"name": "call",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 11,
									"name": "call",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Calls a method of an object, substituting another object for the current object."
									},
									"parameters": [
										{
											"id": 12,
											"name": "this",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Function"
											}
										},
										{
											"id": 13,
											"name": "thisArg",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The object to be used as the current object."
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 14,
											"name": "argArray",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isRest": true
											},
											"comment": {
												"text": "A list of arguments to be passed to the method.\n"
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Function.call"
									}
								}
							],
							"sources": [
								{
									"fileName": "F:/Dev/web_playgrounds/dssm/node_modules/typescript/lib/lib.d.ts",
									"line": 275,
									"character": 8
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Function.call"
							}
						},
						{
							"id": 20,
							"name": "toString",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 21,
									"name": "toString",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns a string representation of a function."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Function.toString"
									}
								}
							],
							"sources": [
								{
									"fileName": "F:/Dev/web_playgrounds/dssm/node_modules/typescript/lib/lib.d.ts",
									"line": 286,
									"character": 12
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Function.toString"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								3,
								4,
								26,
								24,
								25,
								23,
								22
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								5,
								15,
								10,
								20
							]
						}
					],
					"sources": [
						{
							"fileName": "Emitter.ts",
							"line": 4,
							"character": 25
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Function"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						27
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						2
					]
				}
			],
			"sources": [
				{
					"fileName": "Emitter.ts",
					"line": 1,
					"character": 0
				}
			]
		}
	],
	"groups": [
		{
			"title": "External modules",
			"kind": 1,
			"children": [
				1
			]
		}
	]
}